import time
import mysql.connector
import datetime

# Establish a connection to the MySQL database(s)

db_connection = mysql.connector.connect(
    host="localhost",
    user="Alekwa",
    password="root",
    database="school_project"
)
db_cursor = db_connection.cursor()

vehicle_records = {}

def register_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    owner_name = input("\nEnter the name of the Car owner: \n")
    time_in = time.strftime("%Y-%m-%d %H:%M:%S")
    vehicle_records[registration_number] = {"time_in": time_in, "owner_name": owner_name}
    print("\nVehicle registered successfully.\n")
    time.sleep(3)

    # Insert into Customers table
    try:
        query = "INSERT INTO Customers (OwnerName) VALUES (%s)"
        values = (owner_name,)
        db_cursor.execute(query, values)
        db_connection.commit()
    except mysql.connector.Error as e:
        print("MySQL Error:", e)
        db_connection.rollback()

    # Insert into ParkingRecords table
    try:
        query = "INSERT INTO ParkingRecords (RegistrationNumber, CustomerID, TimeIn) VALUES (%s, LAST_INSERT_ID(), %s)"
        values = (registration_number, time_in)
        db_cursor.execute(query, values)
        db_connection.commit()
        print("\nVehicle registered successfully.\n")
    except mysql.connector.Error as e:
        print("MySQL Error:", e)
        db_connection.rollback()

def release_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    time_out = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Check if the vehicle exists and calculate the parking fee
    query = "SELECT CustomerID, TimeIn FROM ParkingRecords WHERE RegistrationNumber = %s"
    values = (registration_number,)
    
    # Reconnect the cursor if it's disconnected
    if not db_connection.is_connected():
        db_connection.reconnect()
    
    db_cursor.execute(query, values)
    record = db_cursor.fetchone()
    
    if record:
        customer_id, time_in = record
        time_difference = (datetime.datetime.strptime(time_out, "%Y-%m-%d %H:%M:%S") - time_in).total_seconds()
        parking_fee = time_difference * 1
        
        # Update ParkingRecords
        try:
            query = "UPDATE ParkingRecords SET TimeOut = %s, ParkingFee = %s WHERE RegistrationNumber = %s"
            values = (time_out, parking_fee, registration_number)
            db_cursor.execute(query, values)
            db_connection.commit()
            print("\nParking fee: KES {}.".format(parking_fee))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)

def check_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")

    # Query the database to get vehicle details
    query = """
    SELECT c.OwnerName, pr.TimeIn, pr.TimeOut, pr.ParkingFee
    FROM Customers c
    LEFT JOIN ParkingRecords pr ON c.CustomerID = pr.CustomerID
    WHERE pr.RegistrationNumber = %s
    """
    values = (registration_number,)

    db_cursor.execute(query, values)
    vehicle_info = db_cursor.fetchone()

    if vehicle_info:
        owner_name, time_in, time_out, parking_fee = vehicle_info
        print("\nVehicle found.\n")
        print("Details:")
        print("  Name of Owner: {}".format(owner_name))
        print("  Registration number: {}".format(registration_number))
        print("  Time in: {}".format(time_in))

        if time_out is not None and parking_fee is not None:
            print("  Time out: {}".format(time_out))
            print("  Parking fee: KES {}".format(parking_fee))
        else:
            print("  Time out: Not yet released")
            print("  Parking fee: Not yet charged\n")

        time.sleep(5)
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)

def delete_customer_information(OwnerName):
    try:
        # Delete records based on RegistrationNumber from the CustomerInformation table only
        delete_customer_info_query = "DELETE FROM Customers WHERE OwnerName = %s"
        
        # Execute the DELETE statement
        db_cursor.execute(delete_customer_info_query, (OwnerName,))
        
        # Commit the changes
        db_connection.commit()
        print("Customer information deleted successfully.")
    except mysql.connector.Error as e:
        print("MySQL Error:", e)
        db_connection.rollback()

def display_customer_information():
    try:
        query = """
        SELECT c.CustomerID, c.OwnerName, pr.RegistrationNumber
        FROM Customers c
        JOIN ParkingRecords pr ON c.CustomerID = pr.CustomerID
        """
        db_cursor.execute(query)
        customer_info = db_cursor.fetchall()

        if customer_info:

            print("Customer Information:")

            for row in customer_info:
                customer_id, owner_name, registration_number = row
                print("Customer ID: {}".format(customer_id))
                print("Name of Owner: {}".format(owner_name))
                print("Registration number: {}".format(registration_number))
                print("-" * 20)
        else:
            print("No customer information found.")
            
    except mysql.connector.Error as e:
        print("MySQL Error:", e)

def main():
    while True:
        print("Choose one of the following options:")
        print("\n1. Register vehicle\n")
        print("\n2. Release vehicle\n")
        print("\n3. Check vehicle\n")
        print("\n4. Delete customer information\n")
        print("\n5. Display Registered Customers Information\n")  # Option to display customer information
        print("\n6. Exit\n")
        option = input("\nEnter your choice: \n")

        if option == "1":
            register_vehicle()
        elif option == "2":
            release_vehicle()
        elif option == "3":
            check_vehicle()
        elif option == "4":
            owner_name = input("\nEnter the owner's name to delete customer information: \n")
            delete_customer_information(owner_name)  # Call the delete function with user input
        elif option == "5":
            display_customer_information()  # Call the display function
        elif option == "6":
            print("\n./././././Exiting./././././\n")
            time.sleep(2)
            break
        else:
            print("Invalid option :(")

    db_cursor.close()
    db_connection.close()

if __name__ == "__main__":
    main()